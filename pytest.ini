#pytest.ini

[pytest]

testpaths =
    tests

markers =
    test_conexion: Se testea que haya conexión a la pagina de MongoAtlas
    
    
    test_response: Se testea que la respuesta de la API de MongoAtlas devuelva un str
    
    
    test_convertirStrConFormatoJsonAObjetoPy: Testea que a la función solo se le puede pasar un str con formato JSON para devolver una variable con el contenido JSON
    test_generarJsonApartirDeUnStr: Este test comprueba que se genere un fichero JSON a apartir de un string en formato JSON
    test_comprobarSchemaDeUnDiccionario: Este test chequea la estructura de un objeto y lo valida segun el esquema que se le ha indicado en la funcion (en nuestro caso , el esquema de las bicis)



    test_comprobarSiElContenidoDeUnFicheroEsJSON: Este test comprueba si un fichero tiene formato JSON, NO si el fichero es un .json, simplemente si su estructura interna es JSON
    test_convierteElResultadoDelFicheroEnUnaListaDeDocumentos: Esta función se ejecuta después de la anterior, en caso de tener formato JSON nos devuelve una lista con los documentos de dicho fichero



    test_generarUnFicheroJsonDeLaRespuestaAPI: Este test comprueba que se cree un documento.json en json/ con la respuesta de la API.
    test_generarListaDesdeUnFicheroJSON: Esta función es la suma de los dos test anteriores (test_convierteElResultadoDelFicheroEnUnaListaDeDocumentos,test_comprobarSiElContenidoDeUnFicheroEsJSON )
    test_generarElArchivoBikesYQueSeDevuelvaUnaLista: Este test genera el archivo bikes.json en json/ con el contenido de la respuesta y devuelve una lista con esos valores para usarla en src/views/funcionesHTML.py





    test_TYPER_listarDocumentos: Este test comprueba que el argumento (listar-documento) devuelve resultados correcto, también comprueba (listar-documento --todos) 

    test_InsertarDocumentoJsonDesdeTyper: Este test comprueba el parametro insertar-documento de Typer y su parametro --jsonfile